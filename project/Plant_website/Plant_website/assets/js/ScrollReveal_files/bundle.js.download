(function () {
    'use strict';

    function fetchStargazers(callback) {
        if ( callback === void 0 ) callback = function () {};

        var cache = JSON.parse(window.localStorage.getItem("stargazers"));

        if (cache !== null) {
            var elapsed = Date.now() - cache.timestamp;
            if (elapsed < 600000) {
                callback(cache.starcount, true);
                return;
            }
        }

        var xhr = new XMLHttpRequest();
        var uri = "https://scrollrevealjs.org/api/stargazers";
        var async = true;

        xhr.open("GET", uri, async);
        xhr.onreadystatechange = function () {
            if (xhr.readyState === 4) {
                if (xhr.status === 200) {
                    var starcount = parseInt(xhr.responseText);
                    var data = { starcount: starcount, timestamp: Date.now() };
                    localStorage.setItem("stargazers", JSON.stringify(data));
                    callback(starcount, false);
                }
            }
        };
        xhr.send();
    }

    function addCommasToNum(num) {
        return parseInt(num)
            .toString()
            .replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    }

    function easeInOutQuart(time, initial, delta, duration) {
        if ((time /= duration / 2) < 1)
            { return delta / 2 * time * time * time * time + initial; }
        return -delta / 2 * ((time -= 2) * time * time * time - 2) + initial;
    }

    /*! @license miniraf v1.0.1

    	Copyright 2018 Fisssion LLC.

    	Permission is hereby granted, free of charge, to any person obtaining a copy
    	of this software and associated documentation files (the "Software"), to deal
    	in the Software without restriction, including without limitation the rights
    	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    	copies of the Software, and to permit persons to whom the Software is
    	furnished to do so, subject to the following conditions:

    	The above copyright notice and this permission notice shall be included in all
    	copies or substantial portions of the Software.

    	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    	SOFTWARE.

    */
    var polyfill = (function () {
    	var clock = Date.now();

    	return function (callback) {
    		var currentTime = Date.now();
    		if (currentTime - clock > 16) {
    			clock = currentTime;
    			callback(currentTime);
    		} else {
    			setTimeout(function () { return polyfill(callback); }, 0);
    		}
    	}
    })();

    var miniraf = window.requestAnimationFrame ||
    	window.webkitRequestAnimationFrame ||
    	window.mozRequestAnimationFrame ||
    	polyfill;

    function animateCounter(node, final) {
        var initial = parseInt(node.innerHTML.replace(",", ""));
        var delta = final - initial;
        var start = Date.now();
        var duration = 4000;

        var loop = function () {
            var elapsed = Date.now() - start;
            var progress = easeInOutQuart(elapsed, initial, delta, duration);

            if (elapsed >= duration) {
                node.innerHTML = addCommasToNum(final);
            } else {
                node.innerHTML = addCommasToNum(progress);
                miniraf(loop);
            }
        };

        miniraf(loop);
    }

    /*! @license is-dom-node v1.0.4

    	Copyright 2018 Fisssion LLC.

    	Permission is hereby granted, free of charge, to any person obtaining a copy
    	of this software and associated documentation files (the "Software"), to deal
    	in the Software without restriction, including without limitation the rights
    	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    	copies of the Software, and to permit persons to whom the Software is
    	furnished to do so, subject to the following conditions:

    	The above copyright notice and this permission notice shall be included in all
    	copies or substantial portions of the Software.

    	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    	SOFTWARE.

    */
    function isDomNode(x) {
    	return typeof window.Node === 'object'
    		? x instanceof window.Node
    		: x !== null &&
    				typeof x === 'object' &&
    				typeof x.nodeType === 'number' &&
    				typeof x.nodeName === 'string'
    }

    /*! @license is-dom-node-list v1.2.1

    	Copyright 2018 Fisssion LLC.

    	Permission is hereby granted, free of charge, to any person obtaining a copy
    	of this software and associated documentation files (the "Software"), to deal
    	in the Software without restriction, including without limitation the rights
    	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    	copies of the Software, and to permit persons to whom the Software is
    	furnished to do so, subject to the following conditions:

    	The above copyright notice and this permission notice shall be included in all
    	copies or substantial portions of the Software.

    	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    	SOFTWARE.

    */

    function isDomNodeList(x) {
    	var prototypeToString = Object.prototype.toString.call(x);
    	var regex = /^\[object (HTMLCollection|NodeList|Object)\]$/;

    	return typeof window.NodeList === 'object'
    		? x instanceof window.NodeList
    		: x !== null &&
    				typeof x === 'object' &&
    				typeof x.length === 'number' &&
    				regex.test(prototypeToString) &&
    				(x.length === 0 || isDomNode(x[0]))
    }

    /*! @license Tealight v0.3.6

    	Copyright 2018 Fisssion LLC.

    	Permission is hereby granted, free of charge, to any person obtaining a copy
    	of this software and associated documentation files (the "Software"), to deal
    	in the Software without restriction, including without limitation the rights
    	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    	copies of the Software, and to permit persons to whom the Software is
    	furnished to do so, subject to the following conditions:

    	The above copyright notice and this permission notice shall be included in all
    	copies or substantial portions of the Software.

    	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    	SOFTWARE.

    */

    function tealight(target, context) {
      if ( context === void 0 ) { context = document; }

      if (target instanceof Array) { return target.filter(isDomNode); }
      if (isDomNode(target)) { return [target]; }
      if (isDomNodeList(target)) { return Array.prototype.slice.call(target); }
      if (typeof target === "string") {
        try {
          var query = context.querySelectorAll(target);
          return Array.prototype.slice.call(query);
        } catch (err) {
          return [];
        }
      }
      return [];
    }

    // get successful control from form and assemble into object
    // http://www.w3.org/TR/html401/interact/forms.html#h-17.13.2

    // types which indicate a submit action and are not successful controls
    // these will be ignored
    var k_r_submitter = /^(?:submit|button|image|reset|file)$/i;

    // node names which could be successful controls
    var k_r_success_contrls = /^(?:input|select|textarea|keygen)/i;

    // Matches bracket notation.
    var brackets = /(\[[^\[\]]*\])/g;

    // serializes form fields
    // @param form MUST be an HTMLForm element
    // @param options is an optional argument to configure the serialization. Default output
    // with no options specified is a url encoded string
    //    - hash: [true | false] Configure the output type. If true, the output will
    //    be a js object.
    //    - serializer: [function] Optional serializer function to override the default one.
    //    The function takes 3 arguments (result, key, value) and should return new result
    //    hash and url encoded str serializers are provided with this module
    //    - disabled: [true | false]. If true serialize disabled fields.
    //    - empty: [true | false]. If true serialize empty fields
    function serialize(form, options) {
        if (typeof options != 'object') {
            options = { hash: !!options };
        }
        else if (options.hash === undefined) {
            options.hash = true;
        }

        var result = (options.hash) ? {} : '';
        var serializer = options.serializer || ((options.hash) ? hash_serializer : str_serialize);

        var elements = form && form.elements ? form.elements : [];

        //Object store each radio and set if it's empty or not
        var radio_store = Object.create(null);

        for (var i=0 ; i<elements.length ; ++i) {
            var element = elements[i];

            // ingore disabled fields
            if ((!options.disabled && element.disabled) || !element.name) {
                continue;
            }
            // ignore anyhting that is not considered a success field
            if (!k_r_success_contrls.test(element.nodeName) ||
                k_r_submitter.test(element.type)) {
                continue;
            }

            var key = element.name;
            var val = element.value;

            // we can't just use element.value for checkboxes cause some browsers lie to us
            // they say "on" for value when the box isn't checked
            if ((element.type === 'checkbox' || element.type === 'radio') && !element.checked) {
                val = undefined;
            }

            // If we want empty elements
            if (options.empty) {
                // for checkbox
                if (element.type === 'checkbox' && !element.checked) {
                    val = '';
                }

                // for radio
                if (element.type === 'radio') {
                    if (!radio_store[element.name] && !element.checked) {
                        radio_store[element.name] = false;
                    }
                    else if (element.checked) {
                        radio_store[element.name] = true;
                    }
                }

                // if options empty is true, continue only if its radio
                if (val == undefined && element.type == 'radio') {
                    continue;
                }
            }
            else {
                // value-less fields are ignored unless options.empty is true
                if (!val) {
                    continue;
                }
            }

            // multi select boxes
            if (element.type === 'select-multiple') {
                val = [];

                var selectOptions = element.options;
                var isSelectedOptions = false;
                for (var j=0 ; j<selectOptions.length ; ++j) {
                    var option = selectOptions[j];
                    var allowedEmpty = options.empty && !option.value;
                    var hasValue = (option.value || allowedEmpty);
                    if (option.selected && hasValue) {
                        isSelectedOptions = true;

                        // If using a hash serializer be sure to add the
                        // correct notation for an array in the multi-select
                        // context. Here the name attribute on the select element
                        // might be missing the trailing bracket pair. Both names
                        // "foo" and "foo[]" should be arrays.
                        if (options.hash && key.slice(key.length - 2) !== '[]') {
                            result = serializer(result, key + '[]', option.value);
                        }
                        else {
                            result = serializer(result, key, option.value);
                        }
                    }
                }

                // Serialize if no selected options and options.empty is true
                if (!isSelectedOptions && options.empty) {
                    result = serializer(result, key, '');
                }

                continue;
            }

            result = serializer(result, key, val);
        }

        // Check for all empty radio buttons and serialize them with key=""
        if (options.empty) {
            for (var key in radio_store) {
                if (!radio_store[key]) {
                    result = serializer(result, key, '');
                }
            }
        }

        return result;
    }

    function parse_keys(string) {
        var keys = [];
        var prefix = /^([^\[\]]*)/;
        var children = new RegExp(brackets);
        var match = prefix.exec(string);

        if (match[1]) {
            keys.push(match[1]);
        }

        while ((match = children.exec(string)) !== null) {
            keys.push(match[1]);
        }

        return keys;
    }

    function hash_assign(result, keys, value) {
        if (keys.length === 0) {
            result = value;
            return result;
        }

        var key = keys.shift();
        var between = key.match(/^\[(.+?)\]$/);

        if (key === '[]') {
            result = result || [];

            if (Array.isArray(result)) {
                result.push(hash_assign(null, keys, value));
            }
            else {
                // This might be the result of bad name attributes like "[][foo]",
                // in this case the original `result` object will already be
                // assigned to an object literal. Rather than coerce the object to
                // an array, or cause an exception the attribute "_values" is
                // assigned as an array.
                result._values = result._values || [];
                result._values.push(hash_assign(null, keys, value));
            }

            return result;
        }

        // Key is an attribute name and can be assigned directly.
        if (!between) {
            result[key] = hash_assign(result[key], keys, value);
        }
        else {
            var string = between[1];
            // +var converts the variable into a number
            // better than parseInt because it doesn't truncate away trailing
            // letters and actually fails if whole thing is not a number
            var index = +string;

            // If the characters between the brackets is not a number it is an
            // attribute name and can be assigned directly.
            if (isNaN(index)) {
                result = result || {};
                result[string] = hash_assign(result[string], keys, value);
            }
            else {
                result = result || [];
                result[index] = hash_assign(result[index], keys, value);
            }
        }

        return result;
    }

    // Object/hash encoding serializer.
    function hash_serializer(result, key, value) {
        var matches = key.match(brackets);

        // Has brackets? Use the recursive assignment function to walk the keys,
        // construct any missing objects in the result tree and make the assignment
        // at the end of the chain.
        if (matches) {
            var keys = parse_keys(key);
            hash_assign(result, keys, value);
        }
        else {
            // Non bracket notation can make assignments directly.
            var existing = result[key];

            // If the value has been assigned already (for instance when a radio and
            // a checkbox have the same name attribute) convert the previous value
            // into an array before pushing into it.
            //
            // NOTE: If this requirement were removed all hash creation and
            // assignment could go through `hash_assign`.
            if (existing) {
                if (!Array.isArray(existing)) {
                    result[key] = [ existing ];
                }

                result[key].push(value);
            }
            else {
                result[key] = value;
            }
        }

        return result;
    }

    // urlform encoding serializer
    function str_serialize(result, key, value) {
        // encode newlines as \r\n cause the html spec says so
        value = value.replace(/(\r)?\n/g, '\r\n');
        value = encodeURIComponent(value);

        // spaces should be '+' rather than '%20'.
        value = value.replace(/%20/g, '+');
        return result + (result ? '&' : '') + encodeURIComponent(key) + '=' + value;
    }

    var formSerialize = serialize;

    /*!
     * perfect-scrollbar v1.5.0
     * Copyright 2020 Hyunje Jun, MDBootstrap and Contributors
     * Licensed under MIT
     */

    function get(element) {
      return getComputedStyle(element);
    }

    function set(element, obj) {
      for (var key in obj) {
        var val = obj[key];
        if (typeof val === 'number') {
          val = val + "px";
        }
        element.style[key] = val;
      }
      return element;
    }

    function div(className) {
      var div = document.createElement('div');
      div.className = className;
      return div;
    }

    var elMatches =
      typeof Element !== 'undefined' &&
      (Element.prototype.matches ||
        Element.prototype.webkitMatchesSelector ||
        Element.prototype.mozMatchesSelector ||
        Element.prototype.msMatchesSelector);

    function matches(element, query) {
      if (!elMatches) {
        throw new Error('No element matching method supported');
      }

      return elMatches.call(element, query);
    }

    function remove(element) {
      if (element.remove) {
        element.remove();
      } else {
        if (element.parentNode) {
          element.parentNode.removeChild(element);
        }
      }
    }

    function queryChildren(element, selector) {
      return Array.prototype.filter.call(element.children, function (child) { return matches(child, selector); }
      );
    }

    var cls = {
      main: 'ps',
      rtl: 'ps__rtl',
      element: {
        thumb: function (x) { return ("ps__thumb-" + x); },
        rail: function (x) { return ("ps__rail-" + x); },
        consuming: 'ps__child--consume',
      },
      state: {
        focus: 'ps--focus',
        clicking: 'ps--clicking',
        active: function (x) { return ("ps--active-" + x); },
        scrolling: function (x) { return ("ps--scrolling-" + x); },
      },
    };

    /*
     * Helper methods
     */
    var scrollingClassTimeout = { x: null, y: null };

    function addScrollingClass(i, x) {
      var classList = i.element.classList;
      var className = cls.state.scrolling(x);

      if (classList.contains(className)) {
        clearTimeout(scrollingClassTimeout[x]);
      } else {
        classList.add(className);
      }
    }

    function removeScrollingClass(i, x) {
      scrollingClassTimeout[x] = setTimeout(
        function () { return i.isAlive && i.element.classList.remove(cls.state.scrolling(x)); },
        i.settings.scrollingThreshold
      );
    }

    function setScrollingClassInstantly(i, x) {
      addScrollingClass(i, x);
      removeScrollingClass(i, x);
    }

    var EventElement = function EventElement(element) {
      this.element = element;
      this.handlers = {};
    };

    var prototypeAccessors = { isEmpty: { configurable: true } };

    EventElement.prototype.bind = function bind (eventName, handler) {
      if (typeof this.handlers[eventName] === 'undefined') {
        this.handlers[eventName] = [];
      }
      this.handlers[eventName].push(handler);
      this.element.addEventListener(eventName, handler, false);
    };

    EventElement.prototype.unbind = function unbind (eventName, target) {
        var this$1 = this;

      this.handlers[eventName] = this.handlers[eventName].filter(function (handler) {
        if (target && handler !== target) {
          return true;
        }
        this$1.element.removeEventListener(eventName, handler, false);
        return false;
      });
    };

    EventElement.prototype.unbindAll = function unbindAll () {
      for (var name in this.handlers) {
        this.unbind(name);
      }
    };

    prototypeAccessors.isEmpty.get = function () {
        var this$1 = this;

      return Object.keys(this.handlers).every(
        function (key) { return this$1.handlers[key].length === 0; }
      );
    };

    Object.defineProperties( EventElement.prototype, prototypeAccessors );

    var EventManager = function EventManager() {
      this.eventElements = [];
    };

    EventManager.prototype.eventElement = function eventElement (element) {
      var ee = this.eventElements.filter(function (ee) { return ee.element === element; })[0];
      if (!ee) {
        ee = new EventElement(element);
        this.eventElements.push(ee);
      }
      return ee;
    };

    EventManager.prototype.bind = function bind (element, eventName, handler) {
      this.eventElement(element).bind(eventName, handler);
    };

    EventManager.prototype.unbind = function unbind (element, eventName, handler) {
      var ee = this.eventElement(element);
      ee.unbind(eventName, handler);

      if (ee.isEmpty) {
        // remove
        this.eventElements.splice(this.eventElements.indexOf(ee), 1);
      }
    };

    EventManager.prototype.unbindAll = function unbindAll () {
      this.eventElements.forEach(function (e) { return e.unbindAll(); });
      this.eventElements = [];
    };

    EventManager.prototype.once = function once (element, eventName, handler) {
      var ee = this.eventElement(element);
      var onceHandler = function (evt) {
        ee.unbind(eventName, onceHandler);
        handler(evt);
      };
      ee.bind(eventName, onceHandler);
    };

    function createEvent(name) {
      if (typeof window.CustomEvent === 'function') {
        return new CustomEvent(name);
      } else {
        var evt = document.createEvent('CustomEvent');
        evt.initCustomEvent(name, false, false, undefined);
        return evt;
      }
    }

    function processScrollDiff(
      i,
      axis,
      diff,
      useScrollingClass,
      forceFireReachEvent
    ) {
      if ( useScrollingClass === void 0 ) { useScrollingClass = true; }
      if ( forceFireReachEvent === void 0 ) { forceFireReachEvent = false; }

      var fields;
      if (axis === 'top') {
        fields = [
          'contentHeight',
          'containerHeight',
          'scrollTop',
          'y',
          'up',
          'down' ];
      } else if (axis === 'left') {
        fields = [
          'contentWidth',
          'containerWidth',
          'scrollLeft',
          'x',
          'left',
          'right' ];
      } else {
        throw new Error('A proper axis should be provided');
      }

      processScrollDiff$1(i, diff, fields, useScrollingClass, forceFireReachEvent);
    }

    function processScrollDiff$1(
      i,
      diff,
      ref,
      useScrollingClass,
      forceFireReachEvent
    ) {
      var contentHeight = ref[0];
      var containerHeight = ref[1];
      var scrollTop = ref[2];
      var y = ref[3];
      var up = ref[4];
      var down = ref[5];
      if ( useScrollingClass === void 0 ) { useScrollingClass = true; }
      if ( forceFireReachEvent === void 0 ) { forceFireReachEvent = false; }

      var element = i.element;

      // reset reach
      i.reach[y] = null;

      // 1 for subpixel rounding
      if (element[scrollTop] < 1) {
        i.reach[y] = 'start';
      }

      // 1 for subpixel rounding
      if (element[scrollTop] > i[contentHeight] - i[containerHeight] - 1) {
        i.reach[y] = 'end';
      }

      if (diff) {
        element.dispatchEvent(createEvent(("ps-scroll-" + y)));

        if (diff < 0) {
          element.dispatchEvent(createEvent(("ps-scroll-" + up)));
        } else if (diff > 0) {
          element.dispatchEvent(createEvent(("ps-scroll-" + down)));
        }

        if (useScrollingClass) {
          setScrollingClassInstantly(i, y);
        }
      }

      if (i.reach[y] && (diff || forceFireReachEvent)) {
        element.dispatchEvent(createEvent(("ps-" + y + "-reach-" + (i.reach[y]))));
      }
    }

    function toInt(x) {
      return parseInt(x, 10) || 0;
    }

    function isEditable(el) {
      return (
        matches(el, 'input,[contenteditable]') ||
        matches(el, 'select,[contenteditable]') ||
        matches(el, 'textarea,[contenteditable]') ||
        matches(el, 'button,[contenteditable]')
      );
    }

    function outerWidth(element) {
      var styles = get(element);
      return (
        toInt(styles.width) +
        toInt(styles.paddingLeft) +
        toInt(styles.paddingRight) +
        toInt(styles.borderLeftWidth) +
        toInt(styles.borderRightWidth)
      );
    }

    var env = {
      isWebKit:
        typeof document !== 'undefined' &&
        'WebkitAppearance' in document.documentElement.style,
      supportsTouch:
        typeof window !== 'undefined' &&
        ('ontouchstart' in window ||
          ('maxTouchPoints' in window.navigator &&
            window.navigator.maxTouchPoints > 0) ||
          (window.DocumentTouch && document instanceof window.DocumentTouch)),
      supportsIePointer:
        typeof navigator !== 'undefined' && navigator.msMaxTouchPoints,
      isChrome:
        typeof navigator !== 'undefined' &&
        /Chrome/i.test(navigator && navigator.userAgent),
    };

    function updateGeometry(i) {
      var element = i.element;
      var roundedScrollTop = Math.floor(element.scrollTop);
      var rect = element.getBoundingClientRect();

      i.containerWidth = Math.ceil(rect.width);
      i.containerHeight = Math.ceil(rect.height);
      i.contentWidth = element.scrollWidth;
      i.contentHeight = element.scrollHeight;

      if (!element.contains(i.scrollbarXRail)) {
        // clean up and append
        queryChildren(element, cls.element.rail('x')).forEach(function (el) { return remove(el); }
        );
        element.appendChild(i.scrollbarXRail);
      }
      if (!element.contains(i.scrollbarYRail)) {
        // clean up and append
        queryChildren(element, cls.element.rail('y')).forEach(function (el) { return remove(el); }
        );
        element.appendChild(i.scrollbarYRail);
      }

      if (
        !i.settings.suppressScrollX &&
        i.containerWidth + i.settings.scrollXMarginOffset < i.contentWidth
      ) {
        i.scrollbarXActive = true;
        i.railXWidth = i.containerWidth - i.railXMarginWidth;
        i.railXRatio = i.containerWidth / i.railXWidth;
        i.scrollbarXWidth = getThumbSize(
          i,
          toInt((i.railXWidth * i.containerWidth) / i.contentWidth)
        );
        i.scrollbarXLeft = toInt(
          ((i.negativeScrollAdjustment + element.scrollLeft) *
            (i.railXWidth - i.scrollbarXWidth)) /
            (i.contentWidth - i.containerWidth)
        );
      } else {
        i.scrollbarXActive = false;
      }

      if (
        !i.settings.suppressScrollY &&
        i.containerHeight + i.settings.scrollYMarginOffset < i.contentHeight
      ) {
        i.scrollbarYActive = true;
        i.railYHeight = i.containerHeight - i.railYMarginHeight;
        i.railYRatio = i.containerHeight / i.railYHeight;
        i.scrollbarYHeight = getThumbSize(
          i,
          toInt((i.railYHeight * i.containerHeight) / i.contentHeight)
        );
        i.scrollbarYTop = toInt(
          (roundedScrollTop * (i.railYHeight - i.scrollbarYHeight)) /
            (i.contentHeight - i.containerHeight)
        );
      } else {
        i.scrollbarYActive = false;
      }

      if (i.scrollbarXLeft >= i.railXWidth - i.scrollbarXWidth) {
        i.scrollbarXLeft = i.railXWidth - i.scrollbarXWidth;
      }
      if (i.scrollbarYTop >= i.railYHeight - i.scrollbarYHeight) {
        i.scrollbarYTop = i.railYHeight - i.scrollbarYHeight;
      }

      updateCss(element, i);

      if (i.scrollbarXActive) {
        element.classList.add(cls.state.active('x'));
      } else {
        element.classList.remove(cls.state.active('x'));
        i.scrollbarXWidth = 0;
        i.scrollbarXLeft = 0;
        element.scrollLeft = i.isRtl === true ? i.contentWidth : 0;
      }
      if (i.scrollbarYActive) {
        element.classList.add(cls.state.active('y'));
      } else {
        element.classList.remove(cls.state.active('y'));
        i.scrollbarYHeight = 0;
        i.scrollbarYTop = 0;
        element.scrollTop = 0;
      }
    }

    function getThumbSize(i, thumbSize) {
      if (i.settings.minScrollbarLength) {
        thumbSize = Math.max(thumbSize, i.settings.minScrollbarLength);
      }
      if (i.settings.maxScrollbarLength) {
        thumbSize = Math.min(thumbSize, i.settings.maxScrollbarLength);
      }
      return thumbSize;
    }

    function updateCss(element, i) {
      var xRailOffset = { width: i.railXWidth };
      var roundedScrollTop = Math.floor(element.scrollTop);

      if (i.isRtl) {
        xRailOffset.left =
          i.negativeScrollAdjustment +
          element.scrollLeft +
          i.containerWidth -
          i.contentWidth;
      } else {
        xRailOffset.left = element.scrollLeft;
      }
      if (i.isScrollbarXUsingBottom) {
        xRailOffset.bottom = i.scrollbarXBottom - roundedScrollTop;
      } else {
        xRailOffset.top = i.scrollbarXTop + roundedScrollTop;
      }
      set(i.scrollbarXRail, xRailOffset);

      var yRailOffset = { top: roundedScrollTop, height: i.railYHeight };
      if (i.isScrollbarYUsingRight) {
        if (i.isRtl) {
          yRailOffset.right =
            i.contentWidth -
            (i.negativeScrollAdjustment + element.scrollLeft) -
            i.scrollbarYRight -
            i.scrollbarYOuterWidth -
            9;
        } else {
          yRailOffset.right = i.scrollbarYRight - element.scrollLeft;
        }
      } else {
        if (i.isRtl) {
          yRailOffset.left =
            i.negativeScrollAdjustment +
            element.scrollLeft +
            i.containerWidth * 2 -
            i.contentWidth -
            i.scrollbarYLeft -
            i.scrollbarYOuterWidth;
        } else {
          yRailOffset.left = i.scrollbarYLeft + element.scrollLeft;
        }
      }
      set(i.scrollbarYRail, yRailOffset);

      set(i.scrollbarX, {
        left: i.scrollbarXLeft,
        width: i.scrollbarXWidth - i.railBorderXWidth,
      });
      set(i.scrollbarY, {
        top: i.scrollbarYTop,
        height: i.scrollbarYHeight - i.railBorderYWidth,
      });
    }

    function clickRail(i) {
      var element = i.element;

      i.event.bind(i.scrollbarY, 'mousedown', function (e) { return e.stopPropagation(); });
      i.event.bind(i.scrollbarYRail, 'mousedown', function (e) {
        var positionTop =
          e.pageY -
          window.pageYOffset -
          i.scrollbarYRail.getBoundingClientRect().top;
        var direction = positionTop > i.scrollbarYTop ? 1 : -1;

        i.element.scrollTop += direction * i.containerHeight;
        updateGeometry(i);

        e.stopPropagation();
      });

      i.event.bind(i.scrollbarX, 'mousedown', function (e) { return e.stopPropagation(); });
      i.event.bind(i.scrollbarXRail, 'mousedown', function (e) {
        var positionLeft =
          e.pageX -
          window.pageXOffset -
          i.scrollbarXRail.getBoundingClientRect().left;
        var direction = positionLeft > i.scrollbarXLeft ? 1 : -1;

        i.element.scrollLeft += direction * i.containerWidth;
        updateGeometry(i);

        e.stopPropagation();
      });
    }

    function dragThumb(i) {
      bindMouseScrollHandler(i, [
        'containerWidth',
        'contentWidth',
        'pageX',
        'railXWidth',
        'scrollbarX',
        'scrollbarXWidth',
        'scrollLeft',
        'x',
        'scrollbarXRail' ]);
      bindMouseScrollHandler(i, [
        'containerHeight',
        'contentHeight',
        'pageY',
        'railYHeight',
        'scrollbarY',
        'scrollbarYHeight',
        'scrollTop',
        'y',
        'scrollbarYRail' ]);
    }

    function bindMouseScrollHandler(
      i,
      ref
    ) {
      var containerHeight = ref[0];
      var contentHeight = ref[1];
      var pageY = ref[2];
      var railYHeight = ref[3];
      var scrollbarY = ref[4];
      var scrollbarYHeight = ref[5];
      var scrollTop = ref[6];
      var y = ref[7];
      var scrollbarYRail = ref[8];

      var element = i.element;

      var startingScrollTop = null;
      var startingMousePageY = null;
      var scrollBy = null;

      function mouseMoveHandler(e) {
        if (e.touches && e.touches[0]) {
          e[pageY] = e.touches[0].pageY;
        }
        element[scrollTop] =
          startingScrollTop + scrollBy * (e[pageY] - startingMousePageY);
        addScrollingClass(i, y);
        updateGeometry(i);

        e.stopPropagation();
        e.preventDefault();
      }

      function mouseUpHandler() {
        removeScrollingClass(i, y);
        i[scrollbarYRail].classList.remove(cls.state.clicking);
        i.event.unbind(i.ownerDocument, 'mousemove', mouseMoveHandler);
      }

      function bindMoves(e, touchMode) {
        startingScrollTop = element[scrollTop];
        if (touchMode && e.touches) {
          e[pageY] = e.touches[0].pageY;
        }
        startingMousePageY = e[pageY];
        scrollBy =
          (i[contentHeight] - i[containerHeight]) /
          (i[railYHeight] - i[scrollbarYHeight]);
        if (!touchMode) {
          i.event.bind(i.ownerDocument, 'mousemove', mouseMoveHandler);
          i.event.once(i.ownerDocument, 'mouseup', mouseUpHandler);
          e.preventDefault();
        } else {
          i.event.bind(i.ownerDocument, 'touchmove', mouseMoveHandler);
        }

        i[scrollbarYRail].classList.add(cls.state.clicking);

        e.stopPropagation();
      }

      i.event.bind(i[scrollbarY], 'mousedown', function (e) {
        bindMoves(e);
      });
      i.event.bind(i[scrollbarY], 'touchstart', function (e) {
        bindMoves(e, true);
      });
    }

    function keyboard(i) {
      var element = i.element;

      var elementHovered = function () { return matches(element, ':hover'); };
      var scrollbarFocused = function () { return matches(i.scrollbarX, ':focus') || matches(i.scrollbarY, ':focus'); };

      function shouldPreventDefault(deltaX, deltaY) {
        var scrollTop = Math.floor(element.scrollTop);
        if (deltaX === 0) {
          if (!i.scrollbarYActive) {
            return false;
          }
          if (
            (scrollTop === 0 && deltaY > 0) ||
            (scrollTop >= i.contentHeight - i.containerHeight && deltaY < 0)
          ) {
            return !i.settings.wheelPropagation;
          }
        }

        var scrollLeft = element.scrollLeft;
        if (deltaY === 0) {
          if (!i.scrollbarXActive) {
            return false;
          }
          if (
            (scrollLeft === 0 && deltaX < 0) ||
            (scrollLeft >= i.contentWidth - i.containerWidth && deltaX > 0)
          ) {
            return !i.settings.wheelPropagation;
          }
        }
        return true;
      }

      i.event.bind(i.ownerDocument, 'keydown', function (e) {
        if (
          (e.isDefaultPrevented && e.isDefaultPrevented()) ||
          e.defaultPrevented
        ) {
          return;
        }

        if (!elementHovered() && !scrollbarFocused()) {
          return;
        }

        var activeElement = document.activeElement
          ? document.activeElement
          : i.ownerDocument.activeElement;
        if (activeElement) {
          if (activeElement.tagName === 'IFRAME') {
            activeElement = activeElement.contentDocument.activeElement;
          } else {
            // go deeper if element is a webcomponent
            while (activeElement.shadowRoot) {
              activeElement = activeElement.shadowRoot.activeElement;
            }
          }
          if (isEditable(activeElement)) {
            return;
          }
        }

        var deltaX = 0;
        var deltaY = 0;

        switch (e.which) {
          case 37: // left
            if (e.metaKey) {
              deltaX = -i.contentWidth;
            } else if (e.altKey) {
              deltaX = -i.containerWidth;
            } else {
              deltaX = -30;
            }
            break;
          case 38: // up
            if (e.metaKey) {
              deltaY = i.contentHeight;
            } else if (e.altKey) {
              deltaY = i.containerHeight;
            } else {
              deltaY = 30;
            }
            break;
          case 39: // right
            if (e.metaKey) {
              deltaX = i.contentWidth;
            } else if (e.altKey) {
              deltaX = i.containerWidth;
            } else {
              deltaX = 30;
            }
            break;
          case 40: // down
            if (e.metaKey) {
              deltaY = -i.contentHeight;
            } else if (e.altKey) {
              deltaY = -i.containerHeight;
            } else {
              deltaY = -30;
            }
            break;
          case 32: // space bar
            if (e.shiftKey) {
              deltaY = i.containerHeight;
            } else {
              deltaY = -i.containerHeight;
            }
            break;
          case 33: // page up
            deltaY = i.containerHeight;
            break;
          case 34: // page down
            deltaY = -i.containerHeight;
            break;
          case 36: // home
            deltaY = i.contentHeight;
            break;
          case 35: // end
            deltaY = -i.contentHeight;
            break;
          default:
            return;
        }

        if (i.settings.suppressScrollX && deltaX !== 0) {
          return;
        }
        if (i.settings.suppressScrollY && deltaY !== 0) {
          return;
        }

        element.scrollTop -= deltaY;
        element.scrollLeft += deltaX;
        updateGeometry(i);

        if (shouldPreventDefault(deltaX, deltaY)) {
          e.preventDefault();
        }
      });
    }

    function wheel(i) {
      var element = i.element;

      function shouldPreventDefault(deltaX, deltaY) {
        var roundedScrollTop = Math.floor(element.scrollTop);
        var isTop = element.scrollTop === 0;
        var isBottom =
          roundedScrollTop + element.offsetHeight === element.scrollHeight;
        var isLeft = element.scrollLeft === 0;
        var isRight =
          element.scrollLeft + element.offsetWidth === element.scrollWidth;

        var hitsBound;

        // pick axis with primary direction
        if (Math.abs(deltaY) > Math.abs(deltaX)) {
          hitsBound = isTop || isBottom;
        } else {
          hitsBound = isLeft || isRight;
        }

        return hitsBound ? !i.settings.wheelPropagation : true;
      }

      function getDeltaFromEvent(e) {
        var deltaX = e.deltaX;
        var deltaY = -1 * e.deltaY;

        if (typeof deltaX === 'undefined' || typeof deltaY === 'undefined') {
          // OS X Safari
          deltaX = (-1 * e.wheelDeltaX) / 6;
          deltaY = e.wheelDeltaY / 6;
        }

        if (e.deltaMode && e.deltaMode === 1) {
          // Firefox in deltaMode 1: Line scrolling
          deltaX *= 10;
          deltaY *= 10;
        }

        if (deltaX !== deltaX && deltaY !== deltaY /* NaN checks */) {
          // IE in some mouse drivers
          deltaX = 0;
          deltaY = e.wheelDelta;
        }

        if (e.shiftKey) {
          // reverse axis with shift key
          return [-deltaY, -deltaX];
        }
        return [deltaX, deltaY];
      }

      function shouldBeConsumedByChild(target, deltaX, deltaY) {
        // FIXME: this is a workaround for <select> issue in FF and IE #571
        if (!env.isWebKit && element.querySelector('select:focus')) {
          return true;
        }

        if (!element.contains(target)) {
          return false;
        }

        var cursor = target;

        while (cursor && cursor !== element) {
          if (cursor.classList.contains(cls.element.consuming)) {
            return true;
          }

          var style = get(cursor);

          // if deltaY && vertical scrollable
          if (deltaY && style.overflowY.match(/(scroll|auto)/)) {
            var maxScrollTop = cursor.scrollHeight - cursor.clientHeight;
            if (maxScrollTop > 0) {
              if (
                (cursor.scrollTop > 0 && deltaY < 0) ||
                (cursor.scrollTop < maxScrollTop && deltaY > 0)
              ) {
                return true;
              }
            }
          }
          // if deltaX && horizontal scrollable
          if (deltaX && style.overflowX.match(/(scroll|auto)/)) {
            var maxScrollLeft = cursor.scrollWidth - cursor.clientWidth;
            if (maxScrollLeft > 0) {
              if (
                (cursor.scrollLeft > 0 && deltaX < 0) ||
                (cursor.scrollLeft < maxScrollLeft && deltaX > 0)
              ) {
                return true;
              }
            }
          }

          cursor = cursor.parentNode;
        }

        return false;
      }

      function mousewheelHandler(e) {
        var ref = getDeltaFromEvent(e);
        var deltaX = ref[0];
        var deltaY = ref[1];

        if (shouldBeConsumedByChild(e.target, deltaX, deltaY)) {
          return;
        }

        var shouldPrevent = false;
        if (!i.settings.useBothWheelAxes) {
          // deltaX will only be used for horizontal scrolling and deltaY will
          // only be used for vertical scrolling - this is the default
          element.scrollTop -= deltaY * i.settings.wheelSpeed;
          element.scrollLeft += deltaX * i.settings.wheelSpeed;
        } else if (i.scrollbarYActive && !i.scrollbarXActive) {
          // only vertical scrollbar is active and useBothWheelAxes option is
          // active, so let's scroll vertical bar using both mouse wheel axes
          if (deltaY) {
            element.scrollTop -= deltaY * i.settings.wheelSpeed;
          } else {
            element.scrollTop += deltaX * i.settings.wheelSpeed;
          }
          shouldPrevent = true;
        } else if (i.scrollbarXActive && !i.scrollbarYActive) {
          // useBothWheelAxes and only horizontal bar is active, so use both
          // wheel axes for horizontal bar
          if (deltaX) {
            element.scrollLeft += deltaX * i.settings.wheelSpeed;
          } else {
            element.scrollLeft -= deltaY * i.settings.wheelSpeed;
          }
          shouldPrevent = true;
        }

        updateGeometry(i);

        shouldPrevent = shouldPrevent || shouldPreventDefault(deltaX, deltaY);
        if (shouldPrevent && !e.ctrlKey) {
          e.stopPropagation();
          e.preventDefault();
        }
      }

      if (typeof window.onwheel !== 'undefined') {
        i.event.bind(element, 'wheel', mousewheelHandler);
      } else if (typeof window.onmousewheel !== 'undefined') {
        i.event.bind(element, 'mousewheel', mousewheelHandler);
      }
    }

    function touch(i) {
      if (!env.supportsTouch && !env.supportsIePointer) {
        return;
      }

      var element = i.element;

      function shouldPrevent(deltaX, deltaY) {
        var scrollTop = Math.floor(element.scrollTop);
        var scrollLeft = element.scrollLeft;
        var magnitudeX = Math.abs(deltaX);
        var magnitudeY = Math.abs(deltaY);

        if (magnitudeY > magnitudeX) {
          // user is perhaps trying to swipe up/down the page

          if (
            (deltaY < 0 && scrollTop === i.contentHeight - i.containerHeight) ||
            (deltaY > 0 && scrollTop === 0)
          ) {
            // set prevent for mobile Chrome refresh
            return window.scrollY === 0 && deltaY > 0 && env.isChrome;
          }
        } else if (magnitudeX > magnitudeY) {
          // user is perhaps trying to swipe left/right across the page

          if (
            (deltaX < 0 && scrollLeft === i.contentWidth - i.containerWidth) ||
            (deltaX > 0 && scrollLeft === 0)
          ) {
            return true;
          }
        }

        return true;
      }

      function applyTouchMove(differenceX, differenceY) {
        element.scrollTop -= differenceY;
        element.scrollLeft -= differenceX;

        updateGeometry(i);
      }

      var startOffset = {};
      var startTime = 0;
      var speed = {};
      var easingLoop = null;

      function getTouch(e) {
        if (e.targetTouches) {
          return e.targetTouches[0];
        } else {
          // Maybe IE pointer
          return e;
        }
      }

      function shouldHandle(e) {
        if (e.pointerType && e.pointerType === 'pen' && e.buttons === 0) {
          return false;
        }
        if (e.targetTouches && e.targetTouches.length === 1) {
          return true;
        }
        if (
          e.pointerType &&
          e.pointerType !== 'mouse' &&
          e.pointerType !== e.MSPOINTER_TYPE_MOUSE
        ) {
          return true;
        }
        return false;
      }

      function touchStart(e) {
        if (!shouldHandle(e)) {
          return;
        }

        var touch = getTouch(e);

        startOffset.pageX = touch.pageX;
        startOffset.pageY = touch.pageY;

        startTime = new Date().getTime();

        if (easingLoop !== null) {
          clearInterval(easingLoop);
        }
      }

      function shouldBeConsumedByChild(target, deltaX, deltaY) {
        if (!element.contains(target)) {
          return false;
        }

        var cursor = target;

        while (cursor && cursor !== element) {
          if (cursor.classList.contains(cls.element.consuming)) {
            return true;
          }

          var style = get(cursor);

          // if deltaY && vertical scrollable
          if (deltaY && style.overflowY.match(/(scroll|auto)/)) {
            var maxScrollTop = cursor.scrollHeight - cursor.clientHeight;
            if (maxScrollTop > 0) {
              if (
                (cursor.scrollTop > 0 && deltaY < 0) ||
                (cursor.scrollTop < maxScrollTop && deltaY > 0)
              ) {
                return true;
              }
            }
          }
          // if deltaX && horizontal scrollable
          if (deltaX && style.overflowX.match(/(scroll|auto)/)) {
            var maxScrollLeft = cursor.scrollWidth - cursor.clientWidth;
            if (maxScrollLeft > 0) {
              if (
                (cursor.scrollLeft > 0 && deltaX < 0) ||
                (cursor.scrollLeft < maxScrollLeft && deltaX > 0)
              ) {
                return true;
              }
            }
          }

          cursor = cursor.parentNode;
        }

        return false;
      }

      function touchMove(e) {
        if (shouldHandle(e)) {
          var touch = getTouch(e);

          var currentOffset = { pageX: touch.pageX, pageY: touch.pageY };

          var differenceX = currentOffset.pageX - startOffset.pageX;
          var differenceY = currentOffset.pageY - startOffset.pageY;

          if (shouldBeConsumedByChild(e.target, differenceX, differenceY)) {
            return;
          }

          applyTouchMove(differenceX, differenceY);
          startOffset = currentOffset;

          var currentTime = new Date().getTime();

          var timeGap = currentTime - startTime;
          if (timeGap > 0) {
            speed.x = differenceX / timeGap;
            speed.y = differenceY / timeGap;
            startTime = currentTime;
          }

          if (shouldPrevent(differenceX, differenceY)) {
            e.preventDefault();
          }
        }
      }
      function touchEnd() {
        if (i.settings.swipeEasing) {
          clearInterval(easingLoop);
          easingLoop = setInterval(function() {
            if (i.isInitialized) {
              clearInterval(easingLoop);
              return;
            }

            if (!speed.x && !speed.y) {
              clearInterval(easingLoop);
              return;
            }

            if (Math.abs(speed.x) < 0.01 && Math.abs(speed.y) < 0.01) {
              clearInterval(easingLoop);
              return;
            }

            applyTouchMove(speed.x * 30, speed.y * 30);

            speed.x *= 0.8;
            speed.y *= 0.8;
          }, 10);
        }
      }

      if (env.supportsTouch) {
        i.event.bind(element, 'touchstart', touchStart);
        i.event.bind(element, 'touchmove', touchMove);
        i.event.bind(element, 'touchend', touchEnd);
      } else if (env.supportsIePointer) {
        if (window.PointerEvent) {
          i.event.bind(element, 'pointerdown', touchStart);
          i.event.bind(element, 'pointermove', touchMove);
          i.event.bind(element, 'pointerup', touchEnd);
        } else if (window.MSPointerEvent) {
          i.event.bind(element, 'MSPointerDown', touchStart);
          i.event.bind(element, 'MSPointerMove', touchMove);
          i.event.bind(element, 'MSPointerUp', touchEnd);
        }
      }
    }

    var defaultSettings = function () { return ({
      handlers: ['click-rail', 'drag-thumb', 'keyboard', 'wheel', 'touch'],
      maxScrollbarLength: null,
      minScrollbarLength: null,
      scrollingThreshold: 1000,
      scrollXMarginOffset: 0,
      scrollYMarginOffset: 0,
      suppressScrollX: false,
      suppressScrollY: false,
      swipeEasing: true,
      useBothWheelAxes: false,
      wheelPropagation: true,
      wheelSpeed: 1,
    }); };

    var handlers = {
      'click-rail': clickRail,
      'drag-thumb': dragThumb,
      keyboard: keyboard,
      wheel: wheel,
      touch: touch,
    };

    var PerfectScrollbar = function PerfectScrollbar(element, userSettings) {
      var this$1 = this;
      if ( userSettings === void 0 ) { userSettings = {}; }

      if (typeof element === 'string') {
        element = document.querySelector(element);
      }

      if (!element || !element.nodeName) {
        throw new Error('no element is specified to initialize PerfectScrollbar');
      }

      this.element = element;

      element.classList.add(cls.main);

      this.settings = defaultSettings();
      for (var key in userSettings) {
        this.settings[key] = userSettings[key];
      }

      this.containerWidth = null;
      this.containerHeight = null;
      this.contentWidth = null;
      this.contentHeight = null;

      var focus = function () { return element.classList.add(cls.state.focus); };
      var blur = function () { return element.classList.remove(cls.state.focus); };

      this.isRtl = get(element).direction === 'rtl';
      if (this.isRtl === true) {
        element.classList.add(cls.rtl);
      }
      this.isNegativeScroll = (function () {
        var originalScrollLeft = element.scrollLeft;
        var result = null;
        element.scrollLeft = -1;
        result = element.scrollLeft < 0;
        element.scrollLeft = originalScrollLeft;
        return result;
      })();
      this.negativeScrollAdjustment = this.isNegativeScroll
        ? element.scrollWidth - element.clientWidth
        : 0;
      this.event = new EventManager();
      this.ownerDocument = element.ownerDocument || document;

      this.scrollbarXRail = div(cls.element.rail('x'));
      element.appendChild(this.scrollbarXRail);
      this.scrollbarX = div(cls.element.thumb('x'));
      this.scrollbarXRail.appendChild(this.scrollbarX);
      this.scrollbarX.setAttribute('tabindex', 0);
      this.event.bind(this.scrollbarX, 'focus', focus);
      this.event.bind(this.scrollbarX, 'blur', blur);
      this.scrollbarXActive = null;
      this.scrollbarXWidth = null;
      this.scrollbarXLeft = null;
      var railXStyle = get(this.scrollbarXRail);
      this.scrollbarXBottom = parseInt(railXStyle.bottom, 10);
      if (isNaN(this.scrollbarXBottom)) {
        this.isScrollbarXUsingBottom = false;
        this.scrollbarXTop = toInt(railXStyle.top);
      } else {
        this.isScrollbarXUsingBottom = true;
      }
      this.railBorderXWidth =
        toInt(railXStyle.borderLeftWidth) + toInt(railXStyle.borderRightWidth);
      // Set rail to display:block to calculate margins
      set(this.scrollbarXRail, { display: 'block' });
      this.railXMarginWidth =
        toInt(railXStyle.marginLeft) + toInt(railXStyle.marginRight);
      set(this.scrollbarXRail, { display: '' });
      this.railXWidth = null;
      this.railXRatio = null;

      this.scrollbarYRail = div(cls.element.rail('y'));
      element.appendChild(this.scrollbarYRail);
      this.scrollbarY = div(cls.element.thumb('y'));
      this.scrollbarYRail.appendChild(this.scrollbarY);
      this.scrollbarY.setAttribute('tabindex', 0);
      this.event.bind(this.scrollbarY, 'focus', focus);
      this.event.bind(this.scrollbarY, 'blur', blur);
      this.scrollbarYActive = null;
      this.scrollbarYHeight = null;
      this.scrollbarYTop = null;
      var railYStyle = get(this.scrollbarYRail);
      this.scrollbarYRight = parseInt(railYStyle.right, 10);
      if (isNaN(this.scrollbarYRight)) {
        this.isScrollbarYUsingRight = false;
        this.scrollbarYLeft = toInt(railYStyle.left);
      } else {
        this.isScrollbarYUsingRight = true;
      }
      this.scrollbarYOuterWidth = this.isRtl ? outerWidth(this.scrollbarY) : null;
      this.railBorderYWidth =
        toInt(railYStyle.borderTopWidth) + toInt(railYStyle.borderBottomWidth);
      set(this.scrollbarYRail, { display: 'block' });
      this.railYMarginHeight =
        toInt(railYStyle.marginTop) + toInt(railYStyle.marginBottom);
      set(this.scrollbarYRail, { display: '' });
      this.railYHeight = null;
      this.railYRatio = null;

      this.reach = {
        x:
          element.scrollLeft <= 0
            ? 'start'
            : element.scrollLeft >= this.contentWidth - this.containerWidth
            ? 'end'
            : null,
        y:
          element.scrollTop <= 0
            ? 'start'
            : element.scrollTop >= this.contentHeight - this.containerHeight
            ? 'end'
            : null,
      };

      this.isAlive = true;

      this.settings.handlers.forEach(function (handlerName) { return handlers[handlerName](this$1); });

      this.lastScrollTop = Math.floor(element.scrollTop); // for onScroll only
      this.lastScrollLeft = element.scrollLeft; // for onScroll only
      this.event.bind(this.element, 'scroll', function (e) { return this$1.onScroll(e); });
      updateGeometry(this);
    };

    PerfectScrollbar.prototype.update = function update () {
      if (!this.isAlive) {
        return;
      }

      // Recalcuate negative scrollLeft adjustment
      this.negativeScrollAdjustment = this.isNegativeScroll
        ? this.element.scrollWidth - this.element.clientWidth
        : 0;

      // Recalculate rail margins
      set(this.scrollbarXRail, { display: 'block' });
      set(this.scrollbarYRail, { display: 'block' });
      this.railXMarginWidth =
        toInt(get(this.scrollbarXRail).marginLeft) +
        toInt(get(this.scrollbarXRail).marginRight);
      this.railYMarginHeight =
        toInt(get(this.scrollbarYRail).marginTop) +
        toInt(get(this.scrollbarYRail).marginBottom);

      // Hide scrollbars not to affect scrollWidth and scrollHeight
      set(this.scrollbarXRail, { display: 'none' });
      set(this.scrollbarYRail, { display: 'none' });

      updateGeometry(this);

      processScrollDiff(this, 'top', 0, false, true);
      processScrollDiff(this, 'left', 0, false, true);

      set(this.scrollbarXRail, { display: '' });
      set(this.scrollbarYRail, { display: '' });
    };

    PerfectScrollbar.prototype.onScroll = function onScroll (e) {
      if (!this.isAlive) {
        return;
      }

      updateGeometry(this);
      processScrollDiff(this, 'top', this.element.scrollTop - this.lastScrollTop);
      processScrollDiff(
        this,
        'left',
        this.element.scrollLeft - this.lastScrollLeft
      );

      this.lastScrollTop = Math.floor(this.element.scrollTop);
      this.lastScrollLeft = this.element.scrollLeft;
    };

    PerfectScrollbar.prototype.destroy = function destroy () {
      if (!this.isAlive) {
        return;
      }

      this.event.unbindAll();
      remove(this.scrollbarX);
      remove(this.scrollbarY);
      remove(this.scrollbarXRail);
      remove(this.scrollbarYRail);
      this.removePsClasses();

      // unset elements
      this.element = null;
      this.scrollbarX = null;
      this.scrollbarY = null;
      this.scrollbarXRail = null;
      this.scrollbarYRail = null;

      this.isAlive = false;
    };

    PerfectScrollbar.prototype.removePsClasses = function removePsClasses () {
      this.element.className = this.element.className
        .split(' ')
        .filter(function (name) { return !name.match(/^ps([-_].+|)$/); })
        .join(' ');
    };

    function isMobile(agent) {
        if ( agent === void 0 ) agent = navigator.userAgent;

        return /Android|iPhone|iPad|iPod/i.test(agent);
    }

    if (!isMobile()) {
        tealight(".layout__two-column__fixed").map(function (node) {
            new PerfectScrollbar(node);
        });

        tealight("pre > code").map(function (node) {
            new PerfectScrollbar(node, {
                wheelPropagation: true
            });
        });
    }

    setTimeout(function () {
        tealight('.load-hidden').map(function (e) { return e.classList.remove('load-hidden'); });
    }, 2500);

    tealight("#purchase").map(function (form) {
        form.addEventListener("focusin", function (e) {
            e.target.parentNode.parentNode.classList.add("focused");
        });
        form.addEventListener("focusout", function (e) {
            e.target.parentNode.parentNode.classList.remove("focused");
        });
    });

    fetchStargazers(function (stars, fromCache) {
        tealight(".github__star-count").map(function (node) {
            if (fromCache) {
                node.innerHTML = addCommasToNum(stars);
            } else {
                animateCounter(node, stars);
            }
        });
    });

    var nodes = tealight("html, body");
    var scrollBuffer = 0;
    var isOpen = false;

    tealight(".floating-button").map(function (button) {
        button.addEventListener("click", function () {
            if (!isOpen) {
                scrollBuffer =
                    document.documentElement.scrollTop || document.body.scrollTop;
                nodes.forEach(function (node) {
                    node.style.position = "fixed";
                    node.style.top = (scrollBuffer * -1) + "px";
                });
                document.body.classList.add("sidebar-open");
                isOpen = true;
            } else {
                nodes.forEach(function (node) {
                    node.style.position = "";
                    node.style.top = "";
                });
                document.documentElement.scrollTop = scrollBuffer;
                document.body.scrollTop = scrollBuffer;
                document.body.classList.remove("sidebar-open");
                isOpen = false;
            }
        });
    });

    // document
    //     .querySelector(".floating-button__underlay")
    //     .addEventListener("click", () => {
    //         nodes.forEach(node => (node.style.position = ""));
    //         document.documentElement.scrollTop = scrollBuffer;
    //         document.body.classList.remove("sidebar-open");
    //     });

    /**
     * Google Analytics
     */
    window.ga =
        window.ga ||
        function() {
            (ga.q = ga.q || []).push(arguments);
        };
    ga.l = +new Date();

    ga("create", "UA-55186174-1", "auto");
    ga("send", "pageview");

    // const sponsor = document.getElementById('sponsor')
    // sponsor.addEventListener('click', handleSponsorClick)

    // function handleSponsorClick () {
    // 	ga('send', 'event', {
    // 		eventCategory: 'Sponsors',
    // 		eventAction: 'click',
    // 		eventLabel: 'e.g. React for Beginners', // optional
    // 	})
    // }

    tealight(".js-async-docsearch").map(function (script) { return script.addEventListener(
            "load",
            function () {
                docsearch({
                    apiKey: "bc35bddc788fd71169ff91b6a9517ecd",
                    indexName: "scrollrevealjs",
                    inputSelector: ".search-bar__input",
                    debug: true
                });
                docsearch({
                    apiKey: "bc35bddc788fd71169ff91b6a9517ecd",
                    indexName: "scrollrevealjs",
                    inputSelector: ".mobile-nav .search-bar__input",
                    debug: true
                });
            },
            false
        ); }
    );

    tealight(".js-async-stripe").map(function (script) { return script.addEventListener(
            "load",
            function () {
                var stripe = Stripe("pk_live_HHWNHVqg6gjpQOc5xLzAPwIp");
                // const stripe = Stripe("pk_test_O7QKvVW1pmJXLQF0eA7G2Bxo");
                if (window.location.pathname.match(/pricing/) !== null) {
                    stripeLoader(stripe);
                }
            },
            false
        ); }
    );

    function stripeLoader(stripe) {
        var root = tealight("#stripe-card")[0];
        var fontSize =
            getComputedStyle(document.body)["fontSize"] || isMobile()
                ? "14px"
                : "16px";

        var style = {
            base: {
                color: "#6e7e9d",
                iconColor: "#c7ced9",
                fontSmoothing: "antialiased",
                fontSize: fontSize,
                fontWeight: "bold",
                "::placeholder": {
                    color: "#6e7e9d",
                    fontWeight: "normal"
                },
                ":focus": {
                    color: "#fefefe",
                    fontWeight: "bold",
                    "::placeholder": {
                        color: "#afb8c6"
                    }
                }
            },
            invalid: {
                color: "#ed5740",
                iconColor: "#ed5740"
            }
        };
        var card = stripe.elements().create("card", { style: style });

        card.on("focus", function () { return root.parentNode.classList.add("focused"); });
        card.on("blur", function () { return root.parentNode.classList.remove("focused"); });
        card.on("change", function (event) {
            var output = root.nextSibling;
            if (event.error) {
                output.textContent = event.error.message;
            } else {
                output.textContent = "";
            }
        });

        if (root) { card.mount(root); }

        tealight("#purchase").map(function (form) {
            form.addEventListener("submit", function (event) {
                event.preventDefault();
                stripe.createToken(card).then(function (result) {
                    if (result.error) {
                        var err = form.getElementById("stripe-card").nextSibling;
                        err.textContent = result.error.message;
                    } else {
                        tealight(".pricing__submit").map(function (button) { return button.classList.add("is-active"); }
                        );
                        stripeTokenHandler(result.token);
                    }
                });
            });
        });
    }

    function stripeTokenHandler(token) {
        tealight("#purchase").map(function (form) {
            var hiddenInput = document.createElement("input");
            hiddenInput.setAttribute("type", "hidden");
            hiddenInput.setAttribute("name", "stripeToken");
            hiddenInput.setAttribute("value", token.id);
            form.appendChild(hiddenInput);
            submitForm(form);
        });
    }

    function submitForm(form) {
        var xhr = new XMLHttpRequest();
        var uri = "/api/charge";
        var async = true;

        xhr.open("POST", uri, async);
        xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
        xhr.onreadystatechange = function () {
            if (xhr.readyState === XMLHttpRequest.DONE) {
                if (xhr.status === 200) {
                    handleSuccess(xhr.responseText);
                } else {
                    handleError(xhr.responseText);
                }
            }
        };
        xhr.send(formSerialize(form));
    }

    function handleSuccess(licenseCode) {
        tealight(".pricing__success").map(function (element) {
            element.dataset.heading = "License Code: " + licenseCode;
        });
        tealight(".pricing__matrix").map(function (element) {
            element.classList.add("is-successful");
        });
        return licenseCode;
    }

    function handleError(message) {
        tealight(".pricing__submit").map(function (button) {
            button.classList.remove("is-active");
        });
    }

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
